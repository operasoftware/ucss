{
  "author": {
    "name": "Øyvind Håkestad",
    "email": "oyvindeh@opera.com",
    "url": "https://github.com/oyvindeh"
  },
  "contributors": [
    {
      "name": "Hans S. Tømmerholt",
      "email": "hanst@opera.com",
      "url": "https://github.com/hanssto"
    }
  ],
  "name": "ucss",
  "description": "Find unused CSS rules",
  "version": "0.1.1-beta",
  "homepage": "https://github.com/operasoftware/ucss",
  "repository": {
    "type": "git",
    "url": "git@github.com:operasoftware/ucss"
  },
  "main": "./lib/ucss.js",
  "bin": {
    "ucss": "bin/ucss.bin.js"
  },
  "keywords": [
    "css",
    "unused"
  ],
  "dependencies": {
    "optimist": "0.3.x",
    "jsdom": "0.2.x",
    "jquery": "1.7.x",
    "async": "0.1.x",
    "url": ">= 0.7.9",
    "rimraf": "2.0.2"
  },
  "devDependencies": {
    "buster": "0.4.x",
    "sinon": "1.3.x",
    "buster-resources": "0.3.2"
  },
  "license": "BSD",
  "readme": "## uCSS (v0.1.0-beta)\nFind unused CSS selectors, as well as duplicate selectors. Also, you can get an overview of how many matches there are for each rule in your markup.\n\nKey features:\n* Find unused CSS selectors in a HTML code base.\n* See how many times each CSS selector has been used.\n* Find duplicate CSS selectors.\n\nBut wait, there's more! By setting up a config file, uCSS can also:\n* Visit several URLs/HTML files in one go.\n* Use several CSS files at once.\n* Do login, and visit pages both as a logged in and logged out user.\n* Whitelist CSS rules that should be ignored.\n\nuCSS is written for Node (http://www.nodejs.org/). It can be used both as a library and as a command line tool. With a little tweaking, it should also be easy to use it in other contexts as well.\n\nPlease note: uCSS is currently in beta.\n\n### Installation\n\n`npm install ucss`\n\n### Usage (command line)\n\n```\n$ ucss --help\nUsage: ucss [OPTION]...\n\nOptions:\n  --help            This help text.                                         \n  --html, -h        HTML to load.                                           \n  --css, -c         CSS to load.                                            \n  --config, -g      Config file to use.                                       [default: true]\n  --used, -u        Show numbers on used rules, in addition to unused rules.  [default: false]\n  --nosummary, -n   Output summary.                                           [default: false]\n  --duplicates, -d  Show duplicates.                                          [default: false]\n\nEither a config file, or HTML and CSS files are required. If no arguments are specified, uCSS\nwill look for a ucss.json file in the current directory.\n```\nSo, to check a web page you could write\n```\n$ ucss -h http://example.com/foo.html -c foo.css\n```\nNote that the CSS file has to be stored locally (for the time being). To check multiple pages, and also output duplicates as well as all used and unused rules, you can do\n```\n$ ucss -d -u -h http://example.com/foo.html -h http://example.com/bar.html -c foo.css\n```\nTo use a config file (\"ucss.json\") that you have created in the current folder, simply run\n```\n$ ucss\n```\nor specify another file name using the -g option. For more info on the config file, see below.\n\n### Usage (as library)\n\n```\nvar css = \".foo {} .bar {} .baz {}\";\nvar html = \"<html><head></head><body class='foo'></body></html>\";\nvar whitelist = [\".baz\"];\nvar auth = null;\nucss.analyze(css, html, whitelist, auth, function(result) {\n    require('../lib/helpers/output').standard(\n        result, false, false, false);\n    };);\n```\n\n### Setting up a config file\nuCSS allows multiple HTML files/URLs as argument, but it soon gets tiresome to write (and remember) them all. By creating a small config file, you can set up uCSS to automatically visit a set of URLs when you run it.\n\nIn addition to this, you can also specify a function that uCSS can use for login. uCSS will then visit each of the URLs in your config file both as a logged in and logged out user.\n\nFurthermore, you can create a white list of selectors that should be ignored. This is useful if you have e.g. classes that are toggled by JavaScript and thus might not be visible when uCSS visits the page, or if you have special styling for various error situations that is tricky to trigger.\n\nAs well as using several html files, uCSS can also combine CSS from several files, which can also be specified in your config file.\n\nIf you name your config file \"ucss.json\", it will automatically be picked up by ucss. You can also name your config file something else, and use the -g option to point to it.\n\nPlease see the [example config file](https://github.com/operasoftware/ucss/blob/master/examples/ucss.json). If you want to write a custom login function, see below.\n\n#### Logging in\nLogin requires you to set up a config file. In the config file, you can specify your own login function:\n\n```\n{\n    ...,\n    auth: {\n        \"username\": \"foo\",\n        \"password\": \"bar\",\n        \"loginUrl\": \"http://example.com/login/\",\n        \"loginFunc\": function(url, username, password, callback) {\n            // Do login, get cookie\n            var cookie = \"sessionid:1234\"\n            callback(cookie);\n        }\n   },\n   ...\n}\n\n```\n...or you can just specify a login helper:\n\n```\n    \"loginFunc\": \"djangoLogin\"\n```\nThere is currently only one login helper available, for Django.",
  "_id": "ucss@0.1.1-beta",
  "_from": "ucss"
}
